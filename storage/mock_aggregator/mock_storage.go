// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_aggregator is a generated GoMock package.
package mock_aggregator

import (
	news "news-aggregator/entity/news"
	source "news-aggregator/entity/source"
	storage "news-aggregator/storage"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// DeleteSourceByName mocks base method.
func (m *MockStorage) DeleteSourceByName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceByName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSourceByName indicates an expected call of DeleteSourceByName.
func (mr *MockStorageMockRecorder) DeleteSourceByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceByName", reflect.TypeOf((*MockStorage)(nil).DeleteSourceByName), name)
}

// GetNews mocks base method.
func (m *MockStorage) GetNews(path string) ([]news.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", path)
	ret0, _ := ret[0].([]news.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockStorageMockRecorder) GetNews(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockStorage)(nil).GetNews), path)
}

// GetNewsBySourceName mocks base method.
func (m *MockStorage) GetNewsBySourceName(sourceName source.Name, sourceStorage storage.SourceStorage) ([]news.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsBySourceName", sourceName, sourceStorage)
	ret0, _ := ret[0].([]news.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsBySourceName indicates an expected call of GetNewsBySourceName.
func (mr *MockStorageMockRecorder) GetNewsBySourceName(sourceName, sourceStorage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsBySourceName", reflect.TypeOf((*MockStorage)(nil).GetNewsBySourceName), sourceName, sourceStorage)
}

// GetSourceByName mocks base method.
func (m *MockStorage) GetSourceByName(arg0 source.Name) (source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceByName", arg0)
	ret0, _ := ret[0].(source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceByName indicates an expected call of GetSourceByName.
func (mr *MockStorageMockRecorder) GetSourceByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceByName", reflect.TypeOf((*MockStorage)(nil).GetSourceByName), arg0)
}

// GetSources mocks base method.
func (m *MockStorage) GetSources() ([]source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSources")
	ret0, _ := ret[0].([]source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSources indicates an expected call of GetSources.
func (mr *MockStorageMockRecorder) GetSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSources", reflect.TypeOf((*MockStorage)(nil).GetSources))
}

// IsSourceExists mocks base method.
func (m *MockStorage) IsSourceExists(arg0 source.Name) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSourceExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSourceExists indicates an expected call of IsSourceExists.
func (mr *MockStorageMockRecorder) IsSourceExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSourceExists", reflect.TypeOf((*MockStorage)(nil).IsSourceExists), arg0)
}

// SaveNews mocks base method.
func (m *MockStorage) SaveNews(currentSource source.Source, news []news.News) (source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNews", currentSource, news)
	ret0, _ := ret[0].(source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNews indicates an expected call of SaveNews.
func (mr *MockStorageMockRecorder) SaveNews(currentSource, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNews", reflect.TypeOf((*MockStorage)(nil).SaveNews), currentSource, news)
}

// SaveSource mocks base method.
func (m *MockStorage) SaveSource(source source.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSource", source)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSource indicates an expected call of SaveSource.
func (mr *MockStorageMockRecorder) SaveSource(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSource", reflect.TypeOf((*MockStorage)(nil).SaveSource), source)
}

// MockNewsStorage is a mock of NewsStorage interface.
type MockNewsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockNewsStorageMockRecorder
}

// MockNewsStorageMockRecorder is the mock recorder for MockNewsStorage.
type MockNewsStorageMockRecorder struct {
	mock *MockNewsStorage
}

// NewMockNewsStorage creates a new mock instance.
func NewMockNewsStorage(ctrl *gomock.Controller) *MockNewsStorage {
	mock := &MockNewsStorage{ctrl: ctrl}
	mock.recorder = &MockNewsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewsStorage) EXPECT() *MockNewsStorageMockRecorder {
	return m.recorder
}

// GetNews mocks base method.
func (m *MockNewsStorage) GetNews(path string) ([]news.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNews", path)
	ret0, _ := ret[0].([]news.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNews indicates an expected call of GetNews.
func (mr *MockNewsStorageMockRecorder) GetNews(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNews", reflect.TypeOf((*MockNewsStorage)(nil).GetNews), path)
}

// GetNewsBySourceName mocks base method.
func (m *MockNewsStorage) GetNewsBySourceName(sourceName source.Name, sourceStorage storage.SourceStorage) ([]news.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNewsBySourceName", sourceName, sourceStorage)
	ret0, _ := ret[0].([]news.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNewsBySourceName indicates an expected call of GetNewsBySourceName.
func (mr *MockNewsStorageMockRecorder) GetNewsBySourceName(sourceName, sourceStorage interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNewsBySourceName", reflect.TypeOf((*MockNewsStorage)(nil).GetNewsBySourceName), sourceName, sourceStorage)
}

// SaveNews mocks base method.
func (m *MockNewsStorage) SaveNews(currentSource source.Source, news []news.News) (source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNews", currentSource, news)
	ret0, _ := ret[0].(source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SaveNews indicates an expected call of SaveNews.
func (mr *MockNewsStorageMockRecorder) SaveNews(currentSource, news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNews", reflect.TypeOf((*MockNewsStorage)(nil).SaveNews), currentSource, news)
}

// MockSourceStorage is a mock of SourceStorage interface.
type MockSourceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSourceStorageMockRecorder
}

// MockSourceStorageMockRecorder is the mock recorder for MockSourceStorage.
type MockSourceStorageMockRecorder struct {
	mock *MockSourceStorage
}

// NewMockSourceStorage creates a new mock instance.
func NewMockSourceStorage(ctrl *gomock.Controller) *MockSourceStorage {
	mock := &MockSourceStorage{ctrl: ctrl}
	mock.recorder = &MockSourceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSourceStorage) EXPECT() *MockSourceStorageMockRecorder {
	return m.recorder
}

// DeleteSourceByName mocks base method.
func (m *MockSourceStorage) DeleteSourceByName(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSourceByName", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSourceByName indicates an expected call of DeleteSourceByName.
func (mr *MockSourceStorageMockRecorder) DeleteSourceByName(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSourceByName", reflect.TypeOf((*MockSourceStorage)(nil).DeleteSourceByName), name)
}

// GetSourceByName mocks base method.
func (m *MockSourceStorage) GetSourceByName(arg0 source.Name) (source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourceByName", arg0)
	ret0, _ := ret[0].(source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSourceByName indicates an expected call of GetSourceByName.
func (mr *MockSourceStorageMockRecorder) GetSourceByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourceByName", reflect.TypeOf((*MockSourceStorage)(nil).GetSourceByName), arg0)
}

// GetSources mocks base method.
func (m *MockSourceStorage) GetSources() ([]source.Source, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSources")
	ret0, _ := ret[0].([]source.Source)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSources indicates an expected call of GetSources.
func (mr *MockSourceStorageMockRecorder) GetSources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSources", reflect.TypeOf((*MockSourceStorage)(nil).GetSources))
}

// IsSourceExists mocks base method.
func (m *MockSourceStorage) IsSourceExists(arg0 source.Name) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSourceExists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSourceExists indicates an expected call of IsSourceExists.
func (mr *MockSourceStorageMockRecorder) IsSourceExists(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSourceExists", reflect.TypeOf((*MockSourceStorage)(nil).IsSourceExists), arg0)
}

// SaveSource mocks base method.
func (m *MockSourceStorage) SaveSource(source source.Source) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSource", source)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSource indicates an expected call of SaveSource.
func (mr *MockSourceStorageMockRecorder) SaveSource(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSource", reflect.TypeOf((*MockSourceStorage)(nil).SaveSource), source)
}
