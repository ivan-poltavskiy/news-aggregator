version: '3'

env:
  DOCKER_IMAGE_NAME: "alanut93/news_aggregator"
  DOCKER_IMAGE_TAG: "v1.0.18"
  DOCKER_UPDATER_IMAGE_TAG: "v1.0.2"
  DOCKERFILE_PATH: ".Dockerfile"
  UPDATER_DOCKERFILE_PATH: "news-updater/.Dockerfile"
  DOCKER_PORT: "443"
  SERVER_EXPOSE_PORT: "443"
  HELM_CHART_NAME: "news-aggregator"
  AWS_REGION: "eu-west-1"
  AWS_ACCOUNT_ID: "406477933661"
  AWS_DEFAULT_REGION: "eu-west-1"
  AWS_SERVER_IMAGE: "406477933661.dkr.ecr.eu-west-1.amazonaws.com/ivan-news-aggregator"
  AWS_UPDATER_IMAGE: "406477933661.dkr.ecr.eu-west-1.amazonaws.com/ivan-news-aggregator-updater"

output:
  group:
    begin: '::group::{{.TASK}}'
    end: '::endgroup::'

tasks:
  tidy:
    desc: "Run go mod tidy"
    cmd: go mod tidy

  mocks-generate:
    desc: "Generate mocks for the project"
    cmd: go generate ./...

  test:
    desc: "Run all tests in the project."
    deps: [ mocks-generate ]
    cmd: go test ./...

  fmt:
    desc: "go fmt on all Go files"
    cmd: go fmt ./...

  vet:
    desc: "Run go vet on all Go files"
    cmd: go vet ./...

  docker-build:
    desc: "Run docker build"
    cmd: docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG -f $DOCKERFILE_PATH .

  docker-build-operator:
    desc: "Run docker build for operator image"
    cmd: docker build -t alanut93/updater:v1.0.2 -f operator/Dockerfile .

  docker-run:
    desc: "Run docker container"
    cmd: docker run -d -p $DOCKER_PORT:$SERVER_EXPOSE_PORT $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

  aws-image-push-server:
    desc: "Build and push the image of news aggregator server to te AWS ECR"
    cmds:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - docker build -t $AWS_SERVER_IMAGE:$DOCKER_IMAGE_TAG -f $DOCKERFILE_PATH .
      - docker image push $AWS_SERVER_IMAGE:$DOCKER_IMAGE_TAG

  aws-image-push-updater:
    desc: "Build and push the image of news aggregator updater to te AWS ECR"
    cmds:
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
      - docker build -t $AWS_UPDATER_IMAGE:$DOCKER_UPDATER_IMAGE_TAG -f $UPDATER_DOCKERFILE_PATH .
      - docker image push $AWS_UPDATER_IMAGE:$DOCKER_UPDATER_IMAGE_TAG

  cli-run:
    desc: "Run the CLI locally"
    cmd: go run cmd/command-line-client/main.go

  server-run:
    desc: "Run the web server locally"
    cmd: go run cmd/web/main.go

  check-all:
    desc: "Run all checks: mod tidy, fmt, tests and vet"
    cmds:
      - task: tidy
      - task: fmt
      - task: test
      - task: vet

  create-namespace:
    desc: "Create a Kubernetes namespace if it does not exist"
    cmds:
      - |
        if ! kubectl get namespace news-aggregator >/dev/null 2>&1; then
          kubectl create namespace news-aggregator
          echo "Namespace news-aggregator created"
        else
          echo "Namespace news-aggregator already exists"
        fi

  delete-namespace:
    cmd: kubectl delete namespace news-aggregator
    desc: "Delete a Kubernetes namespace"

  deploy:
    desc: "Deploys news-aggregator app on Kubernetes cluster"
    deps: [ create-namespace ]
    cmds:
      - kubectl apply -f templates

  undeploy:
    desc: "Removes news-aggregator app from Kubernetes cluster"
    cmds:
      - kubectl delete -f templates

  createChart:
    desc: "Creates a Helm chart with all needed resources for the news-aggregator"
    cmds:
      - helm dependency update ./$HELM_CHART_NAME
      - helm lint ./$HELM_CHART_NAME
      - helm package ./$HELM_CHART_NAME
      - mkdir -p ./news-aggregator/charts
      - mv *.tgz ./news-aggregator/charts
    silent: true

  installChart:
    desc: "Install Helm chart with provided access keys"
    cmds:
      - helm install $HELM_CHART_NAME ./$HELM_CHART_NAME --namespace news-aggregator --set accessKey={{.ACCESS_KEY}} --set privateAccessKey={{.PRIVATE_ACCESS_KEY}}

  uninstallChart:
    desc: "Uninstalls the Helm chart from the Kubernetes cluster"
    cmds:
      - helm uninstall $HELM_CHART_NAME --namespace news-aggregator
  aws-auth-helm:
    desc: "Authenticate Helm with AWS ECR"
    cmds:
      - aws ecr get-login-password --region $AWS_REGION | helm registry login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  docker_login:
    desc: "Login to the ECR registry"
    cmd: aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
  configureAWS:
    cmds:
      - aws configure set aws_access_key_id {{.AWS_ACCESS_KEY_ID}}
      - aws configure set aws_secret_access_key {{.AWS_SECRET_ACCESS_KEY}}
      - aws configure set region ${AWS_DEFAULT_REGION}
      - aws configure set output json
    vars:
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
  pushChart:
    desc: "Pushes chart to the Helm repository"
    deps:
      - aws-auth-helm
      - createChart
    cmds:
      - helm push charts/news_aggregator_chart-0.1.0.tgz oci://$AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
    silent: true