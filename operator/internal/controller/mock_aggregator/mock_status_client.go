// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/controller-runtime/pkg/client (interfaces: StatusClient)

// Package mocks is a generated GoMock package.
package controller

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockStatusClient is a mock of StatusClient interface.
type MockStatusClient struct {
	ctrl     *gomock.Controller
	recorder *MockStatusClientMockRecorder
}

// MockStatusClientMockRecorder is the mock recorder for MockStatusClient.
type MockStatusClientMockRecorder struct {
	mock *MockStatusClient
}

// NewMockStatusClient creates a new mock instance.
func NewMockStatusClient(ctrl *gomock.Controller) *MockStatusClient {
	mock := &MockStatusClient{ctrl: ctrl}
	mock.recorder = &MockStatusClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusClient) EXPECT() *MockStatusClientMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockStatusClient) Status() client.SubResourceWriter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(client.SubResourceWriter)
	return ret0
}

// Status indicates an expected call of Status.
func (mr *MockStatusClientMockRecorder) Status() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStatusClient)(nil).Status))
}
