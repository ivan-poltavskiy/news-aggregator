AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy EKS Cluster with VPC, Subnets, Roles, and Security Groups.

Parameters:
  InstanceType:
    Description: Node instance type
    Type: String
    Default: t3.medium
    AllowedValues:
      - t3.medium
      - t2.medium
      - t2.large

  KubernetesVersion:
    Type: String
    Default: '1.30'
    Description: 'Version of Kubernetes to deploy'

Mappings:
  KubernetesVersionMapping:
    '1.29':
      VpcCniVersion: v1.17.1-eksbuild.3
      KubeProxyVersion: v1.29.0-eksbuild.3
      CoreDnsVersion: v1.10.1-eksbuild.8
      PodIdentityAgentVersion: v1.3.1-eksbuild.2
    '1.30':
      VpcCniVersion: v1.18.1-eksbuild.3
      KubeProxyVersion: v1.30.0-eksbuild.3
      CoreDnsVersion: v1.11.1-eksbuild.8
      PodIdentityAgentVersion: v1.3.2-eksbuild.2

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: eks-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: eks-internet-gateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: eks-route-table

  Route:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: eks-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      Tags:
        - Key: Name
          Value: eks-public-subnet-2

  SubnetRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTable

  EKSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow communication between EKS nodes and control plane
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: eks-cluster-sg

  EKSClusterRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: eks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
      Tags:
        - Key: Name
          Value: eks-cluster-role

  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: eks-cluster
      RoleArn: !GetAtt EKSClusterRole.Arn
      Version: !Ref KubernetesVersion
      ResourcesVpcConfig:
        SubnetIds:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
        SecurityGroupIds:
          - !Ref EKSSecurityGroup
      UpgradePolicy:
        SupportType: STANDARD
  NodeInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
      Tags:
        - Key: Name
          Value: eks-node-instance-role

  EKSNodeGroup:
    Type: AWS::EKS::Nodegroup
    Properties:
      DiskSize: 20
      ClusterName: !Ref EKSCluster
      NodeRole: !GetAtt NodeInstanceRole.Arn
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      ScalingConfig:
        MinSize: 1
        MaxSize: 4
        DesiredSize: 2
      AmiType: AL2_x86_64
      InstanceTypes:
        - !Ref InstanceType
      RemoteAccess:
        Ec2SshKey: ivan-kp

  VpcCniAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: vpc-cni
      ClusterName: !Ref EKSCluster
      AddonVersion: !FindInMap [ KubernetesVersionMapping, !Ref KubernetesVersion, VpcCniVersion ]
      ResolveConflicts: OVERWRITE

  CoreDnsAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: coredns
      ClusterName: !Ref EKSCluster
      AddonVersion: !FindInMap [ KubernetesVersionMapping, !Ref KubernetesVersion, CoreDnsVersion ]
      ResolveConflicts: OVERWRITE

  KubeProxyAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: kube-proxy
      ClusterName: !Ref EKSCluster
      AddonVersion: !FindInMap [ KubernetesVersionMapping, !Ref KubernetesVersion, KubeProxyVersion ]
      ResolveConflicts: OVERWRITE

  PodIdentityAddon:
    Type: AWS::EKS::Addon
    Properties:
      AddonName: eks-pod-identity-agent
      ClusterName: !Ref EKSCluster
      AddonVersion: !FindInMap [ KubernetesVersionMapping, !Ref KubernetesVersion, PodIdentityAgentVersion ]
      ResolveConflicts: OVERWRITE

Outputs:
  ClusterName:
    Description: Name of the EKS Cluster
    Value: !Ref EKSCluster

  NodeGroupName:
    Description: Name of the EKS Node Group
    Value: !Ref EKSNodeGroup

  VPCId:
    Description: ID of the VPC
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: ID of the first public subnet
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: ID of the second public subnet
    Value: !Ref PublicSubnet2

  SecurityGroupId:
    Description: ID of the EKS Security Group
    Value: !Ref EKSSecurityGroup