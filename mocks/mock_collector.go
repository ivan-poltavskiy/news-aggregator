// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

// Package mocks is a generated GoMock package.
package mocks

import (
	news "news-aggregator/entity/news"
	source "news-aggregator/entity/source"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCollector is a mock of Collector interface.
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
}

// MockCollectorMockRecorder is the mock recorder for MockCollector.
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance.
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// FindNewsByResourcesName mocks base method.
func (m *MockCollector) FindNewsByResourcesName(sourcesNames []source.Name) ([]news.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNewsByResourcesName", sourcesNames)
	ret0, _ := ret[0].([]news.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindNewsByResourcesName indicates an expected call of FindNewsByResourcesName.
func (mr *MockCollectorMockRecorder) FindNewsByResourcesName(sourcesNames interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNewsByResourcesName", reflect.TypeOf((*MockCollector)(nil).FindNewsByResourcesName), sourcesNames)
}
