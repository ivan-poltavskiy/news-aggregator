// Code generated by MockGen. DO NOT EDIT.
// Source: client.go

// Package mock_aggregator is a generated GoMock package.
package client

import (
	news "news-aggregator/entity/news"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// FetchNews mocks base method.
func (m *MockClient) FetchNews() ([]news.News, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchNews")
	ret0, _ := ret[0].([]news.News)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchNews indicates an expected call of FetchNews.
func (mr *MockClientMockRecorder) FetchNews() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchNews", reflect.TypeOf((*MockClient)(nil).FetchNews))
}

// Print mocks base method.
func (m *MockClient) Print(news []news.News) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Print", news)
}

// Print indicates an expected call of Print.
func (mr *MockClientMockRecorder) Print(news interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockClient)(nil).Print), news)
}
